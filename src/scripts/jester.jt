
(defun factorize (n)
	(let
		( (fact  1)
		  (res () ) )
		
		(loop (> n 1)
			(set fact (+ 1 fact))
			(when (= (mod n fact) 0)	
				(do 
					(append fact res)
					(/= n fact)
					(set fact 1))))
		
		; return the list of factors 'res'
		
		res))


(defun factorize (n (res ()))
	(if (= n 1)
		
		(for i in 1 ..
			(when (= (% n i) 0))
				(factorize (/ n i) (append n res)))

		res))

(if T (do
	(print 1)
	(print 2)
	(print 3)))

(if T { 
	(print 1)   
	(print 2)
	(print 3))) ;; { == (do

(if T 
	(print "true")
else
	(print "false"))

(if (and T F)
	(print 1)
elif (and F F)
	(print 2)
elif (and F T)
	(print 3)
else
	(print 4))